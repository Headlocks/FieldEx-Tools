LECO Commands

Installing SSH

	Sudo apt install ssh
	systemctl status ssh
	systemctl enable ssh
	systemctl start ssh

Configuring SSH

	cat /etc/ssh/sshd_config
	sudo ufw allow 22/tcp

Creating SSH Keys

	chmod 700 .ssh

	cd .ssh

	touch authorized_keys
	chmod 600 authorized_keys

	ssh-keygen -t rsa -b 4096

	creates a id_rsa and id_rsa.pub

	chmod 600 id_rsa
	chmod 644 (default) id_rsa.pub

	send public key to target clients authorized_keys file. the target needs to have this file created under .ssh
	create the file if it does not exit

	ssh user@ip
	cd .ssh
	touch authorized_keys
	chmod 600 authorized_keys

	send key to target IP

	ssh-copy-id user@ip

	ssh user@ip
	
Situational Awareness

LINUX	
	history
	sysinfo	
	uname -a
	hostnamectl
	ifconfig
	ip a
	netstat -tuln
	ps -elf / ps aux
	whoami
	w
	who
	last
	lastlog
	sudo ufw status
	tail -f /var/log/syslog
	sudo iptables -L

WINDOWS
	history
	systeminfo
	hostname
	ipconfig /all
	netstat -ano
	tasklist
	whoami

SCP (Secure Copy Protocol)

	From Client
	Scp filename user@ipaddress:/home/kali/location/<file name>

	From Target
	scp user@ipaddress:/home/kali/location/<file name> .


FTP (File Transfer Protocol)

	Ftp <ip address>

HASHES

	Md5sum <file>

	
	Sha1sum <file>


ZIPPING/COMPRESSION

	Without compression
	Tar –cf archive.tar file.txt file2.txt

	With compression	
	Tar –czf archive.tar.gz file1.txt file2.txt 

	Extract an archive
	Tar –xf archive.tar
	
	Extract a compressed archive
	Tar –xzf archive.tar.gz

	List contents
	Tar –tf archive.tar


	Zip archive.zip file1.txt file2.txt
	
	Zip –r (recursvie) zip -9 (maximum compression) zip –e (add zip password), unzip –l (list files)

	Unzip archive.zip

	gzip file.txt

	gunzip file.txt.gz


CRYPTOGRAPHIC TOOLS

	OPENSSL
	Open source toolkit that implements the SSL (Secure Sockets Layer) and TSL (Transport Layer Security) protocols, along with cryptographic functions and algorithms.
	Generates certificates, encryption keys, and perform encryption/decryption

	Generate a private key
	openssl genpkey -algorithm RSA -out private.key

	Generate a public key from a private key
	openssl rsa -pubout -in private.key -out public.key

	Encrypt a file
	openssl enc -aes-256-cbc -in file.txt -out file.enc

	Decrypt a file
	openssl enc -d -aes-256-cbc -in file.enc -out file.txt

	GPG (GNU Privacy Guard)

	GPG (or GnuPG) is an open-source implementation of the OpenPGP standard (RFC 4880). GPG is primarily used for encrypting and signing data to provide confidentiality, integrity, and authenticity. It is often used for email encryption and file signing, enabling secure communication and data storage.
	GPG uses a public-private key system, where users generate key pairs (one public and one private key) to securely encrypt and sign messages or files.

	Generate a Key Pair (Public & Private):
	gpg --gen-key

	List Keys in Keyring:

	gpg --list-keys

	Encrypt a File with a Recipient’s Public Key:
	gpg --encrypt --recipient recipient@example.com file.txt 

	Decrypt a File with Your Private Key:
	gpg --decrypt file.txt.gpg

	Sign a File:
	gpg --sign file.txt

	Verify a Signed File:
	gpg --verify file.txt.sig file.txt

	Export a Public Key:
	gpg --export -a recipient@example.com > public.key 

	Import a Public Key:
	gpg --import public.key 



PERMISSIONS

	Chmod (change mode) change permissions of a file or a directory. 
	4 Read, 2 Write, 1 eXecute
	Owner (User), Group, Others

	chmod u+x file.txt
	chmod 755 file.txt
	chmod 777 file.txt
	chmod +x script.sh
	chmod -R 755 directory

	Chown
	Used to change the owneriship of a file or a directory. Modify8 the user and/or group associated with a file or directory.

	Change ownership to a specific user
	Chown alice file.txt

	Change ownership to a specific user and group
	Chown alice:staff file.txt

	Change only the group of a file
	Chown :staff file.txt

	chown -R alice:staff /home/alice

	chown 1001:1001 file.txt



SU / SUDO
	
	su (substitute User)

	Switch the current user to another user account
	Su john 
	Su - (provides full user environment with the -)

	Sudo (superuser do)

	Can execute a command as the root user or another user, as specificed in /etc/sudoers file. 
	sudo nano file.txt
	Sudo –u john ls /home/john



IP / IFCONFIG

	Ip (manage linux networking. Considered more modern and flexible compared to ifconfig)
	Ip link show (show all net interfaces)
	Ip addr show (show ip addresses of all interfaces)
	Ip route (show)
	Ip link set eth0 up, ip link set eth0 down
	Ip addr add 192.168.1.10/24 dev eth0
	Ip addr del 192.168.1.10/24 dev eth0
	Ip –s link show
	Ip route add 192.168.2.0/24 via 192.168.1.1
	Ip route del 192.168.2.0/24
	
	Ifconfig (an older utility used to configure network interfaces in linux, has been depricated to ip command)
	Ifconfig
	Ifconfig eth0
	Ifconfig eth0 up
	Ifconfig eth0 192.168.1.10 netmask 255.255.255.0
	Ifconfig eth0
	Ifconfig eth0 promisc (enable/disable promiscuous mode)
	Ifconfig eth0 -promisc 


NFS (Network File System) (double check and work on this)
	
	A protocol that allows file systems to be shared over a network. It enables a computer (the client) to access files on a remote computer (the server) as if they were on its local system. NFS is common on linux for sharing files between computers.
	NFS Server: the machine sharing its file system
	NFS Client: The machine accessing the shared file system

	“exports” is a file system accessible by the clients. This is done by modifying /etc/exports on the sserver to specify which directories are shared and which clients can access them.

	SERVER SIDE
		Sudo apt install nfs-kernel-server
		Sudo nano /etc/exports
		/srv/nfs ip/cidr(rw,synce,no_subtree_check)
		Sudo exportfs –a
		Sudo systemctl start nfs-kernel-server
		Sudo systemctl enable nfs-kernel-server
		Sudo exportfs –v (check exported directories for verification)

	CLIENT SIDE
		Sudo apt install nfs-common
		Sudo mkdir –p /mnt/nfs
		Sudo mount ip:/srv/nfs /mnt/nfs
		Mount | grep nfs (check the mounted NFS share) or df –h
	
	Automating
		Sudo nano /etc/fstab
		ip:/srv/nfs /mnt/nfs nfs defaults 0 0
		unmounting
		Sudo umount /mnt/nfs
		Sudo umount –f /mnt/nfs


RUNNING A SCRIPT

	script header
		#!/usr/bin/env python3
		#!/bin/bash

	Chmod +x <file name>
	./<script>

	Or 

	Python3 <script.py>
	Bash <script.sh>


MARKUP LANGUAGE

	HTML (Hypertext Markup Language)

	<html>
	  <head>
	    <title>Sample Web Page</title>
	  </head>
	  <body>
	    <h1>Welcome to My Website</h1>
	    <p>This is a sample web page.</p>
	    <a href="https://www.example.com">Click Here</a>
	  </body>
	</html>


VPN’S (Work on this)

	OpenVPN
	sudo apt install openvpn

	wireguard
	sudo apt install wireguard


SSH Tunnel

	standard
	ssh debian@ip

	tunnel
	ssh -L 9001:localhost:22 user@ip
	ssh debian@localhost -p 9001

	port forwrad
	ssh -L 53:ip:53 user@ip

SSH MultiPlexing

	ssh -MS /tmp/T1 user@ip -p 22 

	New Terminal
	ssh -S /tmp/T1 -O forward -L 9000:ip:22 dummy
	ssh -MS /tmp/T2 user@localhost -p 9000

	New Terminal
	ssh -S /tmp/T2 -O forward -L 9001:ip:22 dummy
	ssh -MS /tmp/T3 user@localhost -p 9001

	Proxychains
	ssh -S /tmp/T2 -O forward -L 9002:ip:22 dummy -D 9050


IPTABLES

	port forwarding
	forward incoming port on the external device to an internal ip address and port
	sudo iptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination ip:80
	
	allow the forwarded traffic
	sudo iptables -A FORWARD -p tcp -d ip --dport 80 -j ACCEPT
	
	enable NAT for outgoing packets
	sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE



PING

	ping command relies on ICMP to check whether a device on a network is reachable and to measure round-trip time

	ping uses ICMP Echo Request and ICMP Echo Reply
	sometimes firewalls have ICMP blocked
	
	ping<ip address> 


TRACEROUTE

	network diagnostic tool that traces the path packets take from your computer to a remote host across an IP network. 
	
	traceroute <options> <ip/fqdn>
	
	SAT Hops
		sat hops can be seen around 500.000 ms
		can compromise us if a satellite is being utilized due to us leaving behind our footprints


DNS
	the computer sends a DNS query to the DNS server. The DNS server checks its stored cache before asking another dns server. 
	If you already visited a website, your computer stores the results in its local DNS cache. The computer looks at this cache before conducting a query to quickly access the website.
	dns reverse lookup: uses an ip address to resolve a FQDN rather than a FQDN to resolve an IP

	dig
	dns query tool
	dig google.com
	dig google.com MX
	dig @8.8.8.8 google.com
	nslookup 
	nslookup google.com
	nslookup -query=mx google.com


ARP

	devices on same local network
	translates an IP address into a physical mac address
	arp cache
	arp -a


NMAP

	nmap -sS -Pn -T4 -O <ip address/xx> -oA

	banner grab
	nmap –script=banner <ip address> 

	-A service version, os deteciton, scrip scanning, tracerout
	-sV service version
	-O os detection


TTL’S

	Windows (7/8/10/11) 128
	Linux (Ubuntu, Debian, etc.) 64
	macOS 64
	FreeBSD	64
	Cisco Devices (iOS) 255
	Solaris	255
	AIX 64
	Android	64
	iOS (Apple Mobile Devices) 64


BANNER GRAB

	nc <ip address> <port>
	nmap –script=banner <ip address> 


PACKET SNIFFING

	wireshark &

	tcpdump
	tcpdump src <ip address>
	tcpdump dst <ipaddress>
	
	any traffic to or from a spcific ip

	tcpdump host <ipaddress>
	tcpdump port <port>
	tcpdump net <ipaddress/24>
	tcpdump src host 192.168.1.1 and src port 80
	tcpdump -i eth0

	write to a pcap
	tcpdump -w capture_file.pcap

	read a saved capture
	tcpdump -r capture_file.pcap
	tcpdump src 192.168.1.1 and port 80
	tcpdump 'tcp[tcpflags] & tcp-syn != 0'
	tcpdump port 80 or port 443
